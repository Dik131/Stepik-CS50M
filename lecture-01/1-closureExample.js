function makeHelloFunction(){
    const message = 'Hello!'

    function sayHello(){
        console.log(message)
    }

    return sayHello
}

const helloFunction = makeHelloFunction()
helloFunction() // Outputs: Hello!
// Замыкание сохраняет доступ к переменной message, даже после того, как функция makeHelloFunction завершила выполнение.
// Это происходит потому, что sayHello является замыканием, которое захватывает переменную message из своей лексической области видимости.
// Этот пример демонстрирует, как замыкания могут использоваться для создания функций с приватными переменными.
// Это простой пример замыкания в JavaScript.

// Замыкания — это функции, которые имеют доступ к своей собственной области видимости, области видимости внешней функции и глобальной области видимости.
// Они часто используются для создания приватных переменных или функций, доступ к которым возможен только через определённый интерфейс.
// Замыкания — это мощная особенность JavaScript, широко используемая в функциональном программировании.

// Замыкания также могут использоваться для создания функций, которые "запоминают" своё окружение, что позволяет реализовывать более сложное поведение.
// Этот пример показывает, как замыкания дают доступ к переменным, определённым во внешней области видимости.
// Это фундаментальная концепция в JavaScript, необходимая для понимания работы функций в языке.

// Замыкания создаются каждый раз, когда функция определяется внутри другой функции.
// Это позволяет внутренней функции обращаться к переменным из внешней области видимости, даже после завершения выполнения внешней функции.

// Замыкания — ключевая часть функциональной области видимости в JavaScript, они используются для создания приватных переменных и функций.
// Они также применяются во многих библиотеках и фреймворках JavaScript для создания модульного и переиспользуемого кода.

// Замыкания позволяют создавать функции, имеющие доступ к переменным из внешней области видимости.
// Это простой пример того, как работают замыкания в JavaScript.
// Они являются мощным инструментом, позволяющим функциям сохранять состояние и получать доступ к переменным из внешнего контекста. 