const log = console.log
// –ë—ã–ª–æ: Callback Hell
// –°—Ü–µ–Ω–∞—Ä–∏–π: –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ—Å—Ç—ã ‚Üí –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
function getUserData(userId, callback) {
    setTimeout(() => {
        if (userId <= 0) {
            callback(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'), null)
            return
        }
        callback(null, { id: userId, name: 'John Doe' })
    }, 1000)
}

function getUserPosts(user, callback) {
    setTimeout(() => {
        if (!user) {
            callback(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'), null)
            return
        }
        callback(null, [
            { id: 1, title: '–ü–æ—Å—Ç 1', userId: user.id },
            { id: 2, title: '–ü–æ—Å—Ç 2', userId: user.id }
        ])
    }, 1000)
}

function getPostComments(posts, callback) {
    setTimeout(() => {
        const comments = posts.map(post => ({
            postId: post.id,
            comments: [`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ ${post.title}`]
        }))
        callback(null, comments)
    }, 1000)
}

// üòµ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - Callback Hell:
getUserData(1, function(err, user) {
    if (err) {
        log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err)
        return
    }
    
    getUserPosts(user, function(err, posts) {
        if (err) {
            log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:', err)
            return
        }
        
        getPostComments(posts, function(err, comments) {
            if (err) {
                log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', err)
                return
            }
            
            log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', { user, posts, comments })
        })
    })
})

// –†–µ—à–µ–Ω–∏–µ: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ–º–∏—Å—ã
const log = console.log

// –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Promise-based
function getUserData(userId) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (userId <= 0) {
                reject(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
                return
            }
            resolve({ id: userId, name: 'John Doe' })
        }, 1000)
    })
}

function getUserPosts(user) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (!user) {
                reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'))
                return
            }
            resolve([
                { id: 1, title: '–ü–æ—Å—Ç 1', userId: user.id },
                { id: 2, title: '–ü–æ—Å—Ç 2', userId: user.id }
            ])
        }, 1000)
    })
}

function getPostComments(posts) {
    return new Promise((resolve) => {
        setTimeout(() => {
            const comments = posts.map(post => ({
                postId: post.id,
                comments: [`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ ${post.title}`]
            }))
            resolve(comments)
        }, 1000)
    })
}

// üòç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - Promise Chain:
getUserData(1)
    .then(user => {
        log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω:', user)
        return getUserPosts(user)  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Promise
    })
    .then(posts => {
        log('–ü–æ—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', posts)
        return getPostComments(posts)  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Promise
    })
    .then(comments => {
        log('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', comments)
        log('üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!')
    })
    .catch(error => {
        log('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error.message)
    })
    .finally(() => {
        log('üèÅ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    })
// –¢–µ–ø–µ—Ä—å –∫–æ–¥ —Å—Ç–∞–ª —á–∏—â–µ –∏ –ø–æ–Ω—è—Ç–Ω–µ–µ, –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–ª–±–µ–∫–æ–≤!
// –¢–∞–∫–∂–µ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Å –ø–æ–º–æ—â—å—é catch –∏ finally –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
// –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫–∞–∂–¥–æ–º —à–∞–≥–µ.