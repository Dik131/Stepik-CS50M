const log = console.log
// Пример замыкания, который демонстрирует проблему с использованием цикла и замыканий в JavaScript.
// В этом примере создаётся массив функций, которые выводят значение переменной i.
// При вызове этих функций они все будут выводить одно и то же значение, которое будет равно 5,
// потому что переменная i будет иметь значение 5 после завершения цикла.
// Это происходит из-за того, что функции замыкают переменную i, а не её текущее значение на момент создания функции.

function makeFunctionArray() {
    const arr = []

    for (let i = 0; i < 5; i++){ 
        arr.push(function() {
            console.log(i)
        })
    }
    //log(i) // Outputs: 5
    // Здесь переменная i будет равна 5, потому что цикл завершился, и i теперь имеет значение 5.
    // Это демонстрирует, как замыкания работают с переменными, определёнными в цикле.
    // Если бы мы использовали let вместо var, то мы бы получили ошибку, потому что let создаёт блочную область видимости.
    // Это важный момент, который нужно понимать при работе с замыканиями в JavaScript.
    return arr
}

const functionArr = makeFunctionArray()

//log(i) // Outputs: 5
// При вызове любой из функций в массиве functionArr, они все будут выводить 5,
// потому что замыкание захватывает переменную i, а не её текущее значение на момент создания функции.

functionArr[0]() 