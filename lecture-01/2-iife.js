const log = console.log
// Присваиваем функцию console.log более короткому алиасу 'log' для удобства.

const sayHello = (function(){
    // Здесь начинается немедленно вызываемая функциональная выражение (IIFE).
    // Эта функция выполняется сразу после определения.

    const message = 'Hello!'
    // Приватная переменная 'message', определённая внутри IIFE.
    // Она недоступна за пределами этой функции, что обеспечивает инкапсуляцию.

    function sayHello(){
        log(message)
        // Внутренняя функция 'sayHello' выводит значение переменной 'message' в консоль.
        // Она имеет доступ к переменной 'message' благодаря замыканию.
    }
    return sayHello
    // Возвращаем функцию 'sayHello' из IIFE, делая её доступной снаружи.
})()
// IIFE немедленно выполняется, а её возвращаемое значение (функция 'sayHello') присваивается переменной 'sayHello'.

sayHello() // Hello!
// Вызываем функцию 'sayHello', которая выводит "Hello!" в консоль.

const counter = (function() {
    let count = 0
    // Приватная переменная 'count', которая будет использоваться для отслеживания счётчика.

    function increment() {
        count++
        log(count)
        // Функция 'increment' увеличивает значение 'count' на 1 и выводит его в консоль.
    }

    function reset() {
        count = 0
        log(count)
        // Функция 'reset' сбрасывает значение 'count' до 0 и выводит его в консоль.
    }

    return {
        increment,
        reset
        // Возвращаем объект с методами 'increment' и 'reset', чтобы они были доступны снаружи.
    }
}
)()
// IIFE для создания счётчика, который инкапсулирует переменную 'count' и методы для её изменения.
counter.increment() // 1
counter.increment() // 2
counter.increment() // 3
counter.reset() // 0
counter.increment() // 1
// Вызываем методы счётчика, чтобы продемонстрировать его работу.
// Каждый вызов 'increment' увеличивает счётчик, а 'reset' сбрасывает его до 0.
// Этот код демонстрирует использование IIFE для создания изолированных областей видимости и инкапсуляции данных.
// IIFE (Immediately Invoked Function Expression) позволяет создавать функции, которые выполняются сразу после их определения.
// Это полезно для создания приватных переменных и функций, которые не будут доступны из глобальной области видимости.